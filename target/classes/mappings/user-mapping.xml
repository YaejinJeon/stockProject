<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user">

	<delete id="withdrawal">
		SET foreign_key_checks = 0;
		delete from unsettledcheck where uno = (select uno from unsettled where id = #{id});
		delete from unsettled where id = #{id};
		delete from holdingstock where id = #{id};
		delete from stocknotice where id = #{id};
		delete from tradinghistory where id = #{id};
		delete from user where id = #{id};
		delete from usermoney where id = #{id};
		delete from usernickname where id = #{id};
		delete from userranking where id = #{id};
		SET foreign_key_checks = 1;
	</delete>
	
	<select id="getTradeNotice" resultType="map">
			select notice.tno, stockName, category, tdatetime, tprice,quantity, confirm from stocknotice as notice join tradinghistory as td on td.tno = notice.tno where td.id = #{id} order by notice.tno desc limit 50;
	</select>
	
	<select id="getCommentNotice" resultType="map">
			SELECT c.pno, title, ndatetime, confirm FROM commentnotice as c join board as b on c.pno = b.pno where c.id = #{id} order by ndatetime desc limit 50;
	</select>
	
	<select id="getNewTradeNotice" resultType="map">
			select * from stocknotice where id = #{id} and confirm = 1;
	</select>
	
	<select id="getNewCommentNotice" resultType="map">
			SELECT * FROM commentnotice where id = #{id} and confirm = 1;
	</select>
	
	
	<delete id="deleteNotice">
		update stocknotice set confirm = 0 where id = #{id};
		update commentnotice set confirm = 0 where id = #{id};
	</delete>

	<insert id="signUp">
		INSERT INTO user(id, pw, nickname, tel, point, showEsetSetting, address, charge, udateTime)
		VALUES(#{id}, #{pw}, #{nickname}, #{tel}, 0, #{showEsetSetting}, #{address}, 1, now());
		
		
		<!-- sql 두개 쓰려면 ; 붙여줘야한다 -->
		INSERT INTO usernickname(id, nickname)
		VALUES(#{id}, #{nickname});
		
		
		INSERT INTO usermoney(id, money)
		VALUES(#{id}, 10000000);
		
		INSERT INTO userranking(id, accumasset, resetpoint) VALUES(#{id}, 10000000 ,10000000);
	</insert>
	
	<select id="idCheck" resultType="int" parameterType="map">
		SELECT COUNT(*) 
		FROM user
		
		<choose>
			<when test='id != null and id !="" '>
				WHERE id = #{id}
			</when>
			<when test='nickname != null and nickname !="" '>
				WHERE nickname = #{nickname}
			</when>
			<when test='tel != null and tel !="" '>
				WHERE tel = #{tel} 
			</when>
		</choose>
	</select>
	
	<update id="pointUp" parameterType="user">
		UPDATE user 
		SET point = point + 300
		WHERE id IN (#{friend}, #{id})
	</update>
	
	<select id="getCurrentRevenue" resultType="map">
		SELECT nickname, ifnull((accumasset-resetpoint)/resetpoint*100, 0) as revenue FROM userranking as uk join usernickname as un on un.id = uk.id order by revenue desc Limit 10 ;
	</select>
	
	<!-- 로그인시 id and pw틀렸는지 체크 SignInDAO.login -->
	<select id="signInCheck" parameterType="user" resultType="user">
		SELECT *
		FROM user
		natural join usermoney
		WHERE id = #{id}
	</select>
	
	<select id="selectUser" parameterType="user" resultType="user">
		SELECT * 
		FROM user
		WHERE nickname = #{nickname}
	</select>
	
	<!-- 아이디찾기 -->
	<select id="findId" parameterType="user" resultType="user">
		SELECT *
		FROM user
		WHERE tel=#{tel}
	</select>
	
	<select id="existenceID" resultType="String">
		SELECT id from user where id = #{id};
	</select>
	
	
	<!-- 비밀번호 찾기 -->
	<select id="findPassword" parameterType="user" resultType="user">
		SELECT *
		FROM user
		WHERE id=#{id} 
	</select>
	<!-- 비밀번호 변경 -->
	<update id="updatePassword" parameterType="user">
		update user
		set pw=#{pw}
		where id=#{id}
	</update>
	<!-- 마이페이지 비밀번호 수정시 현재 비밀번호 체크 -->
	<select id="mypageUpdatePasswordCheck" resultType="int" parameterType="map">
		SELECT count(id)
		FROM user
		WHERE pw=#{pw} 
		AND id=#{id}
	</select>
	<!-- 마이페이지 비밀번호 수정 -->
	<update id="mypageUpdatePassword" parameterType="user">
		update user
		set pw=#{pw}
		where id=#{id}
	</update>
	<!-- 개인정보 수정하는 SQL UserInfoDAO.userInfoUpdate -->
	<update id="updateUser" parameterType="user">
		update user
		set NICKNAME=#{nickname}, ADDRESS=#{address}, showEsetSetting=#{showEsetSetting}
		where ID=#{id};

		update usernickname
		set NICKNAME=#{nickname}
		where ID=#{id};
	</update>
	
	<select id="getChargingCount" parameterType="String" resultType="int">
		select charge
		from user
		where id=#{id}
	</select>
	
	<update id="consumpCharge" parameterType="String">
		update user
		natural join usermoney
		set charge=charge-1, money=10000000
		where id=#{id};
		
		delete 
		from unsettled 
		where id=#{id};
	

	
		update holdingstock
		set quantity=0, avgprice=0
		where id=#{id};
		
		update userranking
		set accumasset=10000000
		where id=#{id};
	</update>
	
	<select id="getUnoList" resultType="int">
		select uno
		from unsettled
		where id=#{id}
	</select>

	<delete id="deleteUnsettledCheck">
		delete 
		from unsettled
		where uno=#{uno};
	</delete>
	
	<select id="getAllUser" resultType="user">
		select *
		from user
		natural join usermoney
	</select>
	
	<update id="updateRanking" parameterType="map">
		update userranking
		set accumasset=#{asset}
		where id=#{id}
	</update>
	
	<update id="setResetPoint">
		update userranking as us set us.resetpoint = us.accumasset;
	</update>
	
	<select id="getRanking" parameterType="String" resultType="int">
		select count(*)
		from userranking 
		where accumasset > (select accumasset 
							from userranking 
                    		where id=#{id});
	</select>
	
	<select id="getAccumAsset" parameterType="String" resultType="long">
		select accumasset
		from userranking
		where id=#{id}
	</select>
	
	<select id="getAccumRankingAssetList" resultType="long">
		select accumasset
		from userranking
		order by accumasset desc
		limit 0, 10
	</select>
	
	<select id="getAccumRankingNicknameList" resultType="String">
		select nickname
		from userranking
		natural join user
		order by accumasset desc
		limit 0, 10
	</select>


</mapper>






















