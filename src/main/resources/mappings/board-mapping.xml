<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="board">

	<insert id="writeFreeBoard">
		INSERT INTO board (id, nickname, title, bcontent, bdatetime, views, likes, bno, commentCount)
		VALUES(#{id}, #{nickname}, #{title}, #{bcontent}, sysdate(), 0, 0, #{bno}, 0);
		
		<if test='bno neq "customerNotice"'>
			UPDATE user SET point = point + 100
			WHERE id = #{id};
		</if>
		<if test='bno eq "portfolio"'>
			INSERT INTO filelist
			( pno, thumbnailName )
			SELECT pno, #{thumbnailName}
			FROM board
			ORDER BY pno DESC
			LIMIT 1;
		</if>
	</insert>
	
	
	<update id="updateBoard">
		UPDATE board 
		SET title = #{title}, bcontent = #{bcontent}
		WHERE pno = #{pno};
		<if test="bno eq 'portfolio'">
			UPDATE filelist
			SET thumbnailName = #{thumbnailName}
			WHERE pno = #{pno};
		</if>
	</update>
	
	
	<delete id="deleteBoard">
		DELETE FROM board
		WHERE pno = #{pno};
		
		DELETE FROM commentList
		WHERE pno = #{pno};
		
		<if test="bno eq 'portfolio'">
			DELETE FROM filelist
			WHERE pno = #{pno};
		</if>
	</delete>
	
	
	<select id="getBoard" parameterType = "board" resultType="board">
		<![CDATA[
			SELECT *
		    FROM board
			WHERE pno = #{pno}        
		]]>
		
	</select>
	
	
	<!-- 기존것 -->
	<select id="getMyBoard2" parameterType="user" resultType="board">
		SELECT * FROM board
		WHERE id=#{id}
		ORDER BY pno DESC
	</select>
	
	<!-- pagination용 -->
	<select id="myBoardCount" parameterType="user" resultType="int">
		select count(*)
		from board
		where id=#{id}
	</select>
	
	
	<select id="myCommentCount" parameterType="user" resultType="int">
		select count(*)
		from commentlist
		where id=#{id}
	</select>
	
	<select id="getMyBoard" parameterType="page" resultType="board">
		SELECT *
		FROM board
		WHERE id=#{util.id}
		<if test='util.bSearchStyle.equals("제목")'>
		AND title LIKE CONCAT('%', #{util.boardKeyword}, '%')
		</if>
		<if test='util.bSearchStyle.equals("내용")'>
		AND bcontent LIKE CONCAT('%', #{util.boardKeyword}, '%')
		</if>
		ORDER BY pno DESC
		LIMIT #{start}, #{cntPerPage}
	</select>
	

	
	<delete id="deleteMyPost" parameterType="map">
		delete
		<if test='type.equals("board")'>
		from board
		where pno=#{no}
		</if>
		<if test='type.equals("comment")'>
		from commentlist
		where cno=#{no}
		</if>
	</delete>
	
	<!-- 자유게시판 페이징처리 -->
	<select id="boardCount" parameterType="board" resultType="int">
		select count(*)
		from board
		where bno = #{bno}
	</select>
		
	<select id="boardList" parameterType="page" resultType="board">
		SELECT *
		FROM board as b
		WHERE bno=#{util.bno}
		<choose>
			<!-- 제목검색 -->
			<when test='util.searchStyle.equals("search_title")'>
				AND title LIKE CONCAT('%', #{util.keyword}, '%')
				ORDER BY pno DESC
				LIMIT #{start}, #{cntPerPage}
			</when>
			<!-- 내용검색 -->
			<when test='util.searchStyle.equals("search_content")'>
				AND bcontent LIKE CONCAT('%', #{util.keyword}, '%')
				ORDER BY pno DESC
				LIMIT #{start}, #{cntPerPage}
			</when>
			<!-- 제목 + 내용검색 -->
			<when test='util.searchStyle.equals("search_title_content")'>
				AND title LIKE CONCAT('%', #{util.keyword}, '%')
				OR bcontent LIKE CONCAT('%', #{util.keyword}, '%')
				ORDER BY pno DESC
				LIMIT #{start}, #{cntPerPage}
			</when>
			<!-- 닉네임 검색 -->
			<when test='util.searchStyle.equals("search_nick")'>
				AND nickname LIKE CONCAT('%', #{util.keyword}, '%')
				ORDER BY pno DESC
				LIMIT #{start}, #{cntPerPage}
			</when>
			<!-- 최신순 -->
			<when test='util.orderby.equals("new")'>
				ORDER BY pno DESC
				LIMIT #{start}, #{cntPerPage}
			</when>
			<!-- 인기순 -->
			<when test='util.orderby.equals("best")'>
				ORDER BY likes DESC, pno DESC
				LIMIT #{start}, #{cntPerPage}
			</when>
			<!-- 메인페이지 인기글 -->
			<when test='util.orderby.equals("mainNew")'>
				ORDER BY likes DESC
				LIMIT 5;
			</when>
			<!-- 메인페이지 신규글 -->
			<when test='util.orderby.equals("mainBest")'>
				ORDER BY pno DESC
				LIMIT 5;
			</when>
			<otherwise>
				ORDER BY pno DESC
			</otherwise>
		</choose>	
	</select>
	
	<select id="portfolioList" parameterType="page" resultType="board">
		SELECT *
		FROM board as b
		JOIN filelist as f
		ON b.pno = f.pno
		<choose>
			<!-- 제목검색 -->
			<when test='util.searchStyle.equals("search_title")'>
				AND title LIKE CONCAT('%', #{util.keyword}, '%')
				ORDER BY f.pno DESC
				LIMIT #{start}, #{cntPerPage}
			</when>
			<!-- 내용검색 -->
			<when test='util.searchStyle.equals("search_content")'>
				AND b.bcontent LIKE CONCAT('%', #{util.keyword}, '%')
				ORDER BY f.pno DESC
				LIMIT #{start}, #{cntPerPage}
			</when>
			<!-- 제목 + 내용검색 -->
			<when test='util.searchStyle.equals("search_title_content")'>
				AND b.title LIKE CONCAT('%', #{util.keyword}, '%')
				OR b.bcontent LIKE CONCAT('%', #{util.keyword}, '%')
				ORDER BY f.pno DESC
				LIMIT #{start}, #{cntPerPage}
			</when>
			<!-- 닉네임 검색 -->
			<when test='util.searchStyle.equals("search_nick")'>
				AND b.nickname LIKE CONCAT('%', #{util.keyword}, '%')
				ORDER BY f.pno DESC
				LIMIT #{start}, #{cntPerPage}
			</when>
			<!-- 최신순 -->
			<when test='util.orderby.equals("new")'>
				ORDER BY f.pno DESC
				LIMIT #{start}, #{cntPerPage}
			</when>
			<!-- 인기순 -->
			<when test='util.orderby.equals("best")'>
				ORDER BY b.likes DESC, f.pno DESC
				LIMIT #{start}, #{cntPerPage}
			</when>
			<!-- 메인페이지 인기글 -->
			<when test='util.orderby.equals("mainNew")'>
				ORDER BY b.likes DESC
			</when>
			<!-- 메인페이지 신규글 -->
			<when test='util.orderby.equals("mainBest")'>
				ORDER BY f.pno DESC
			</when>
		</choose>	
	</select>
	
	<!-- 공지사항 다른 게시판에 뿌리기 -->
	<select id="ServiceCenternotice" parameterType="page" resultType="board">
		SELECT pno, commentcount, title, nickname, views, likes, date_SUB(bdatetime,INTERVAL 9 HOUR) as bdatetime
		FROM board 
		WHERE bno= "customerNotice"
		order by bdatetime DESC
		limit 5;
	</select>
	
	<!-- 댓글 등록 시 게시물 옆에 개수 띄우기용 -->
	<update id="commentCount">
		UPDATE board SET
		commentCount = commentCount + 1
		WHERE pno = #{pno}	
	</update>
	
	<!-- 조회수 -->
	<update id="updateViews">
		UPDATE board SET
		views = views + 1
		WHERE pno = #{pno}
	</update>
	
	<!-- 아이디 별 like 체크 (한 게시물에 좋아요 한개만 가능하게하려고) -->
	<select id="userLikesCount" resultType="int">	
		SELECT count(*) FROM likelist
		WHERE id = #{id}
		AND pno = #{pno}
	</select>
	
	
	<!-- board 테이블에 like 증가 -->
	<update id="likesPlusBoard">
		update board
		set likes = likes+1
		where pno = #{pno}	
	</update>
	
	<!-- likelist 테이블에 like 추가 -->
	<insert id="likesPlusList">
		insert into likelist (pno, id)
		values (#{pno}, #{id})
	</insert>
	
	<!-- board 테이블에 like 감소 -->
	<update id="likesMinusBoard">
		update board
		set likes = likes-1
		where pno = #{pno}
	</update>
	
	<delete id="likesMinusList">
		delete from likelist
		where id = #{id}
	</delete>
	
	<select id="prev_next" resultType="board">
		<![CDATA[
		SELECT pno, bno, title 
		FROM(
				(SELECT pno, bno, title
				FROM board
				WHERE pno < #{pno}
				AND bno = #{bno}
				ORDER BY pno DESC LIMIT 1) UNION ALL
				(SELECT pno, bno, title
				FROM board
				WHERE pno > #{pno}
				AND bno = #{bno}
				LIMIT 1) 
			)AS title;
		]]>
	</select>
	
	<update id="deleteBoardComment">
		UPDATE board SET
		commentCount= commentCount-1
		WHERE pno=#{pno}
	</update>
	
	<insert id="reportBoard">
		INSERT INTO reportBoard(pno, title, rtype, rcontent, rdatetime, nickname, rcheck, bno)
		VALUES (#{pno}, #{title}, #{rtype}, #{rcontent}, now(), #{nickname}, '처리대기중',#{bno})
	</insert>

	<select id="reportBoardCount" resultType="int">
		SELECT COUNT(*) 
		FROM reportBoard
		WHERE pno = #{pno}
		AND bno = #{bno}
		AND nickname = #{nickname}
	</select>
	
	
	
	
</mapper>
